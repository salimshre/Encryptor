
---
// inside of  ui folder

**animations.h**
```
#ifndef ANIMATIONS_H
#define ANIMATIONS_H

namespace encryption {
namespace ui {

void show_loading_animation(const char* message);

} // namespace ui
} // namespace encryption

#endif // ANIMATIONS_H
```

---
// inside of ui floder
**animations.cpp**
```
#include "animations.h"
#include <graphics.h>
#include <cstring>
#include <windows.h>

namespace encryption {
namespace ui {

void show_loading_animation(const char* message) {
    int x = 200, y = 350;
    setcolor(WHITE);
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 2);

    const int dotCount = 3;
    int frame = 0;

    bar(x, y, x + 400, y + 40);
    outtextxy(x, y, (char*)message);

    for (int i = 0; i < 15; ++i) {
        char dots[10] = { 0 };
        for (int d = 0; d <= frame % (dotCount + 1); ++d) {
            dots[d] = '.';
        }
        outtextxy(x + strlen(message) * 8, y, dots);
        delay(100);
        frame++;
    }

    bar(x, y, x + 400, y + 40);
}

} // namespace ui
} // namespace encryption
```

---

**user_interface.cpp**
```
#include "user_interface.h"
#include "core/encryption.h"
#include "core/history.h"
#include "ui/helpers.h"
#include "ui/animations.h"
#include <graphics.h>
#include <windows.h>
#include <conio.h>

using namespace encryption;
using namespace encryption::ui;

void show_message_box(const char* message) {
    setcolor(WHITE);
    setfillstyle(SOLID_FILL, DARKGRAY);
    bar(150, 500, 650, 540);
    rectangle(150, 500, 650, 540);
    outtextxy(160, 510, (char*)message);
}

void play_success_sound() {
    PlaySound("success.wav", NULL, SND_FILENAME | SND_ASYNC);
}

void play_error_sound() {
    PlaySound("error.wav", NULL, SND_FILENAME | SND_ASYNC);
}

void show_main_menu() {
    cleardevice();
    readimagefile("background.bmp", 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

    setbkcolor(BLACK);
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
    outtextxy(300, 100, (char*)"Encryption Tool");

    bar(300, 180, 500, 220); rectangle(300, 180, 500, 220); outtextxy(340, 190, (char*)"Start");
    bar(300, 280, 500, 320); rectangle(300, 280, 500, 320); outtextxy(340, 290, (char*)"History");
    bar(300, 380, 500, 420); rectangle(300, 380, 500, 420); outtextxy(340, 390, (char*)"Exit");

    int x, y;
    while (true) {
        if (ismouseclick(WM_LBUTTONDOWN)) {
            getmouseclick(WM_LBUTTONDOWN, x, y);
            clearmouseclick(WM_LBUTTONDOWN);

            if (x >= 300 && x <= 500 && y >= 180 && y <= 220) {
                run_cipher_interface();
                return;
            } else if (x >= 300 && x <= 500 && y >= 280 && y <= 320) {
                show_history_screen();
                return;
            } else if (x >= 300 && x <= 500 && y >= 380 && y <= 420) {
                show_message_box("Exiting...");
                delay(1000);
                return;
            }
        }
    }
}

void run_cipher_interface() {
    cleardevice();
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
    outtextxy(200, 100, (char*)"Select the file to encrypt/decrypt:");

    std::string filename = openFileDialog();
    if (filename.empty()) {
        show_message_box("No file selected. Returning...");
        delay(1000);
        show_main_menu();
        return;
    }

    FILE* f = fopen(filename.c_str(), "rb");
    if (!f) {
        play_error_sound();
        show_message_box("File not found or inaccessible.");
        delay(1500);
        show_main_menu();
        return;
    }
    fclose(f);

    settextstyle(DEFAULT_FONT, HORIZ_DIR, 2);
    outtextxy(200, 220, (char*)"Choose operation:");

    bar(200, 260, 400, 300); rectangle(200, 260, 400, 300); outtextxy(250, 270, (char*)"Encrypt");
    bar(420, 260, 620, 300); rectangle(420, 260, 620, 300); outtextxy(470, 270, (char*)"Decrypt");

    int x, y;
    char mode = 0;
    while (true) {
        if (ismouseclick(WM_LBUTTONDOWN)) {
            getmouseclick(WM_LBUTTONDOWN, x, y);
            clearmouseclick(WM_LBUTTONDOWN);

            if (x >= 200 && x <= 400 && y >= 260 && y <= 300) {
                mode = 'e';
                break;
            } else if (x >= 420 && x <= 620 && y >= 260 && y <= 300) {
                mode = 'd';
                break;
            }
        }
    }

    show_loading_animation("Processing...");

    bool success = false;
    const int shift = 3;

    if (mode == 'e') {
        success = encryption::processFile(filename, true, shift);
        if (success) encryption::Logger::log("Encrypted", filename);
    } else {
        success = encryption::processFile(filename, false, shift);
        if (success) encryption::Logger::log("Decrypted", filename);
    }

    if (success) {
        show_message_box("Operation successful! Press any key...");
        play_success_sound();
    } else {
        show_message_box("Operation failed. Press any key...");
        play_error_sound();
    }

    getch();
    show_main_menu();
}

void show_history_screen() {
    cleardevice();
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 2);
    outtextxy(300, 30, (char*)"History Log");

    FILE* f = fopen("history.txt", "r");
    if (!f) {
        outtextxy(100, 80, (char*)"No history available.");
        outtextxy(100, SCREEN_HEIGHT - 30, (char*)"Press any key to return.");
        getch();
        show_main_menu();
        return;
    }

    char line[256];
    int y = 80;
    while (fgets(line, sizeof(line), f) && y < SCREEN_HEIGHT - 50) {
        outtextxy(100, y, line);
        y += 20;
    }
    fclose(f);
    outtextxy(100, SCREEN_HEIGHT - 30, (char*)"Press any key to return to menu.");
    getch();
    show_main_menu();
}
```

---
// inside of ui folder
**helpers.h**
```
#ifndef HELPERS_H
#define HELPERS_H

#include <string>

namespace encryption {
namespace ui {

std::string openFileDialog();

} // namespace ui
} // namespace encryption

#endif // HELPERS_H
```

---
// inside of  core folder

**history.h**
```
#ifndef HISTORY_H
#define HISTORY_H

#include <string>

namespace encryption {
namespace Logger {

void log(const std::string& action, const std::string& filename);

} // namespace Logger
} // namespace encryption

#endif // HISTORY_H
```

---

// inside of  core folder

**encryption.cpp**
```
#include "encryption.h"
#include <fstream>
#include <cctype>
#include <vector>
#include <string>

namespace encryption {

static void caesarCipher(std::vector<char>& data, int shift) {
    for (char& ch : data) {
        if (std::isalpha(static_cast<unsigned char>(ch))) {
            char base = std::isupper(static_cast<unsigned char>(ch)) ? 'A' : 'a';
            ch = static_cast<char>((ch - base + shift + 26) % 26 + base);
        }
    }
}

bool processFile(const std::string& filename, bool encrypt, int shift) {
    std::ifstream inFile(filename, std::ios::binary);
    if (!inFile) return false;

    std::vector<char> content((std::istreambuf_iterator<char>(inFile)), std::istreambuf_iterator<char>());
    inFile.close();

    caesarCipher(content, encrypt ? shift : -shift);

    // Manual output path construction
    size_t lastSlash = filename.find_last_of("/\\");
    std::string dir = (lastSlash == std::string::npos) ? "" : filename.substr(0, lastSlash + 1);
    std::string base = (lastSlash == std::string::npos) ? filename : filename.substr(lastSlash + 1);

    std::string outFilename = dir + (encrypt ? "encrypted_" : "decrypted_") + base;

    std::ofstream outFile(outFilename, std::ios::binary);
    if (!outFile) return false;

    outFile.write(content.data(), content.size());
    outFile.close();

    return true;
}

} // namespace encryption
```

---


**main.cpp**
```
#include <graphics.h>
#include "user_interface.h"

int main() {
    initwindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Encryption Tool");
    show_main_menu();
    closegraph();
    return 0;
}
```

---
// inside of  core folder
**encryption.h**
```
#ifndef ENCRYPTION_H
#define ENCRYPTION_H

#include <string>

namespace encryption {

bool processFile(const std::string& filename, bool encrypt, int shift);

} // namespace encryption

#endif // ENCRYPTION_H
```

---
// inside of ui folder
**helpers.cpp**
```
#include "helpers.h"
#include <windows.h>
#include <commdlg.h>

namespace encryption {
namespace ui {

std::string openFileDialog() {
    OPENFILENAME ofn;
    char szFile[260] = { 0 };

    ZeroMemory(&ofn, sizeof(ofn));
    ofn.lStructSize = sizeof(ofn);
    ofn.lpstrFile = szFile;
    ofn.nMaxFile = sizeof(szFile);
    ofn.lpstrFilter = "All Files\0*.*\0Text Files\0*.TXT\0";
    ofn.nFilterIndex = 1;
    ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;

    if (GetOpenFileName(&ofn)) {
        return std::string(szFile);
    }
    return {};
}

} // namespace ui
} // namespace encryption
```

---

**user_interface.h**
```
#ifndef USER_INTERFACE_H
#define USER_INTERFACE_H

#define SCREEN_WIDTH 800
#define SCREEN_HEIGHT 600

void show_main_menu();
void run_cipher_interface();
void show_history_screen();
void show_message_box(const char* message);
void play_success_sound();
void play_error_sound();

#endif // USER_INTERFACE_H
```

---
// inside of  core folder

**history.cpp**
```
#include "history.h"
#include <fstream>
#include <chrono>
#include <iomanip>
#include <sstream>

namespace encryption {
namespace Logger {

void log(const std::string& action, const std::string& filename) {
    std::ofstream hist("history.txt", std::ios::app);
    if (!hist) return;

    auto now = std::chrono::system_clock::now();
    std::time_t now_c = std::chrono::system_clock::to_time_t(now);

    std::tm tm{};
#ifdef _WIN32
    std::tm* tm_ptr = std::localtime(&now_c);
    if (tm_ptr) {
        tm = *tm_ptr;
    }
#else
    localtime_r(&now_c, &tm);
#endif

    std::ostringstream oss;
    oss << std::put_time(&tm, "%Y-%m-%dT%H:%M:%S");
    hist << "[" << oss.str() << "] " << action << ": " << filename << "\n";
}

} // namespace Logger
} // namespace encryption
